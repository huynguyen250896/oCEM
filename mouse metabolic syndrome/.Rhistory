kurt1[-ind2[[n]],n] = NA_real_
}
#messenger
topgenename = list()
bottomgenename = list()
for(m in 1:(ncol(cc3) - 1) ){
if(isTRUE((cc3 < 20)[m])){
if(isTRUE((cc3 < 10)[m])){
cat("\n",">>>> Top 2 hub genes identified in the",unique(moduleColors)[[m]],"module are:",paste(names(which.max(kurt1[,m])), names(which.min(kurt1[,m])),sep = " and "), "\n")
} else{
if(max(kurt1[,m], na.rm = T) > abs(min(kurt1[,m], na.rm = T))){
topgenename[[m]]<-rownames(dplyr::top_n(data.frame(kurt1[,m]),3, wt = data.frame(kurt1[,m])))
bottomgenename[[m]]<-rownames(dplyr::top_n(data.frame(kurt1[,m]),-2, wt = data.frame(kurt1[,m])))
cat("\n",">>>> Top 5 hub genes identified in the",unique(moduleColors)[[m]],"module are:", topgenename[[m]],"",bottomgenename[[m]], "\n")
} else{
bottomgenename[[m]]<-rownames(dplyr::top_n(data.frame(kurt1[,m]),3, wt = data.frame(kurt1[,m])))
topgenename[[m]]<-rownames(dplyr::top_n(data.frame(kurt1[,m]),-2, wt = data.frame(kurt1[,m])))
cat("\n",">>>> Top 5 hub genes identified in the",unique(moduleColors)[[m]],"module are:", bottomgenename[[m]],"",topgenename[[m]], "\n")
}
}
} else{
topgenename[[m]]<-rownames(dplyr::top_n(data.frame(kurt1[,m]),5, wt = data.frame(kurt1[,m])))
bottomgenename[[m]]<-rownames(dplyr::top_n(data.frame(kurt1[,m]),-5, wt = data.frame(kurt1[,m])))
cat("\n",">>>> Top 10 hub genes identified in the",unique(moduleColors)[[m]],"module are:",topgenename[[m]],"",bottomgenename[[m]], "\n")
}
}
#Design results
results = list()
names(fdr1) = moduleColors
results = c(results,list(pattern1, fdr1))
rownames(results[[1]]) = rownames(data)
names(results) = c('patterns', 'signatures')
return(results)
} else{ #IDEALLY, overlappingCGM does not create the grey module
#genes not assigned to any modules will go to grey module
#convert numeric lables into colors
names(fdr1) = gsub('X', '', names(fdr1), perl = T)
moduleColors = WGCNA::labels2colors(as.numeric(names(fdr1)))
#determine the exact number of genes distributed to a certain module
cc3 = data.frame(My_name_is=paste0("Huy", 1:ncol(fdr1)), module = NA, num = NA)
for (n in 1:ncol(fdr1)){
cc3$module = moduleColors
cc3$num[n] = length(fdr1[which(fdr1[,n] == 1), n])
rownames(cc3) = cc3$module
}
cc3 = cc3 %>% dplyr::select(-c(My_name_is, module)) %>% t()
#mesenger
if(exists('remove_comp') & ncol(remove_comp) >=1){
if(ncol(remove_comp) >1){
cat(">> overlappingCGM excluded", ncol(remove_comp), "components as they are empty (i.e., no genes are assigned to them)", "\n")
cat(">> The exact number of genes assigned to each module is: ", "\n"); print(cc3)
} else{
cat(">> overlappingCGM excluded", ncol(remove_comp), "component as it is empty (i.e., no genes are assigned to it)", "\n")
cat(">> The exact number of genes assigned to each module is: ", "\n"); print(cc3)
}
} else{
cat(">> The exact number of genes assigned to each module is: ", "\n"); print(cc3)
}
# Clinical feature-gene modules Assocation
#define numbers of genes and samples
nGenes = ncol(data);
nSamples = nrow(data);
#re-define patterns with color labels
pattern1 = data.frame(t(pattern))
names(pattern1) = moduleColors[1:(length(moduleColors))]
moduleTraitCor = cor(pattern1, clinical, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);
sizeGrWindow(20,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
WGCNA::labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(clinical),
yLabels = moduleColors[1:(length(moduleColors))],
ySymbols = names(pattern1),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.63,
zlim = c(-1,1),
main = paste("Module-clinical feature relationships"))
# Identify hub-genes in each module: most significant genes ~ most extreme in the signature distribution
cat("\n","- Starting to detect hub-genes within each discovered module...")
#expression level of genes outside a certain module equal NA values
ind2 = list()
for(n in 1:(ncol(fdr1))){
ind2[[n]] = which(fdr1[,n] == 1)
kurt1[-ind2[[n]],n] = NA_real_
}
#messenger
topgenename = list()
bottomgenename = list()
for(m in 1:ncol(cc3) ){
if(isTRUE((cc3 < 20)[m])){
if(isTRUE((cc3 < 10)[m])){
cat("\n",">>>> Top 2 hub genes identified in the",unique(moduleColors)[[m]],"module are:",paste(names(which.max(kurt1[,m])), names(which.min(kurt1[,m])),sep = " and "), "\n")
} else{
if(max(kurt1[,m], na.rm = T) > abs(min(kurt1[,m], na.rm = T))){
topgenename[[m]]<-rownames(dplyr::top_n(data.frame(kurt1[,m]),3, wt = data.frame(kurt1[,m])))
bottomgenename[[m]]<-rownames(dplyr::top_n(data.frame(kurt1[,m]),-2, wt = data.frame(kurt1[,m])))
cat("\n",">>>> Top 5 hub genes identified in the",unique(moduleColors)[[m]],"module are:", topgenename[[m]],"",bottomgenename[[m]], "\n")
} else{
bottomgenename[[m]]<-rownames(dplyr::top_n(data.frame(kurt1[,m]),3, wt = data.frame(kurt1[,m])))
topgenename[[m]]<-rownames(dplyr::top_n(data.frame(kurt1[,m]),-2, wt = data.frame(kurt1[,m])))
cat("\n",">>>> Top 5 hub genes identified in the",unique(moduleColors)[[m]],"module are:", bottomgenename[[m]],"",topgenename[[m]], "\n")
}
}
} else{
topgenename[[m]]<-rownames(dplyr::top_n(data.frame(kurt1[,m]),5, wt = data.frame(kurt1[,m])))
bottomgenename[[m]]<-rownames(dplyr::top_n(data.frame(kurt1[,m]),-5, wt = data.frame(kurt1[,m])))
cat("\n",">>>> Top 10 hub genes identified in the",unique(moduleColors)[[m]],"module are:",topgenename[[m]],"",bottomgenename[[m]], "\n")
}
}
#Design results
results = list()
names(fdr1) = moduleColors
results = c(results,list(pattern1, fdr1))
rownames(results[[1]]) = rownames(data)
names(results) = c('patterns', 'signatures')
return(results)
}
}
cgm=overlappingCGM(data = exp, clinical = clinicalEXP, ncomp = 9,
method = 'ICA-Zscore')
View(cgm$signatures)
remove.packages("DrGA")
rm(list=ls())
load("/Users/admin/Desktop/overlappingCGM/human breast cancer/preprocessed_data.RData")
BiocManager::install("CEMiTool")
library("CEMiTool")
dim(exp)
cem <- cemitool(t(exp))
cem <- cemitool(as.matrix(t(exp)))
View(exp)
exp1 = t(exp)
head(exp1[1:4,1:4])
cem <- cemitool(exp1)
exp1 = t(exp) %>% data.frame()
cem <- cemitool(exp1)
View(exp1)
BiocManager::install("coseq")
library(coseq)
?coseq
runLogCLR <- coseq(exp, K=2:10, transformation="logclr",norm="TMM",
meanFilterCutoff=50, model="kmeans",
nstart=1, iter.max=10)
set.seed(1902)
runLogCLR <- coseq(exp, K=2:15, transformation="logclr",norm="TMM",
meanFilterCutoff=50, model="kmeans",
nstart=1, iter.max=10)
summary(runLogCLR)
set.seed(1902)
runLogCLR <- coseq(exp, K=2:15, transformation="logclr",norm="TMM",
meanFilterCutoff=5, model="kmeans",
nstart=1, iter.max=10)
set.seed(1902)
runLogCLR <- coseq(exp, K=2:15, transformation="logclr",norm="TMM",
meanFilterCutoff=2, model="kmeans",
nstart=1, iter.max=10)
runLogCLR
set.seed(1902)
runLogCLR <- coseq(exp, K=2:15, transformation="logclr",norm="TMM",
meanFilterCutoff=0, model="kmeans",
nstart=1, iter.max=10, parallel = T)
summary(runLogCLR)
?coseq
runLogCLR <- coseq(t(exp), K=2:15, transformation="logclr",norm="TMM",
meanFilterCutoff=0, model="kmeans",
nstart=1, iter.max=10, parallel = T)
runLogCLR <- coseq(t(exp), K=2:15, transformation="logclr",norm="TMM",
meanFilterCutoff=50, model="kmeans",
nstart=1, iter.max=10, parallel = T)
warnings()
runLogCLR <- coseq(t(exp), K=2:15, transformation="none",norm="TMM",
meanFilterCutoff=50, model="kmeans",
nstart=1, iter.max=10, parallel = T)
View(runLogCLR)
dim(exp)
summary(run_arcsin)
summary(runLogCLR)
plot(runLogCLR, graphs="boxplots")
labels <- clusters(runLogCLR)
table(labels)
probapost <- assay(runLogCLR)
head(probapost)
View(runLogCLR)
View(runLogCLR@tcounts@listData)
probapost <- assay(runLogCLR)
View(probapost)
?cemitool
cem <- cemitool(exp1, cor_method = "pearson")
dim(exp1)
cem <- cemitool(exp1, cor_method = "pearson",min_ngen = 10)
summary(runLogCLR)
View(runLogCLR)
runLogCLR@tcounts@rownames
?coseq
runLogCLR <- coseq(t(exp), K=2:15, transformation="logclr",norm="TMM",
meanFilterCutoff=50, model="kmeans",
nstart=1, iter.max=10, parallel = T)
runLogCLR <- coseq(t(exp), K=2:15, transformation="logclr",norm="TMM",
meanFilterCutoff=50, model="Normal",
nstart=1, iter.max=10, parallel = T)
table(is.na(exp))
set.seed(1902)
runLogCLR <- coseq(t(exp), K=2:15, transformation="none",norm="TMM",
meanFilterCutoff=50, model="Normal",
nstart=1, iter.max=10, parallel = T)
summary(runLogCLR)
set.seed(1902)
runLogCLR <- coseq(t(exp), K=2:15, transformation="none",normFactors="TMM",
meanFilterCutoff=50, model="logclr",
nstart=1, iter.max=10, parallel = T)
dim(exp)
rm(list=ls())
setwd("~/Desktop/overlappingCGM/human breast cancer/raw_data")
load("~/Desktop/overlappingCGM/human breast cancer/preprocessed_data.RData")
View(cgm$signatures)
cgm$signatures[,2]
cgm$signatures[,2] == 1
names(cgm$signatures[,2] == 1)
rownames(cgm$signatures[,2] == 1)
cgm$signatures[cgm$signatures[,2] == 1,]
cgm$signatures[cgm$signatures[,2] == 1,2]
rownames(cgm$signatures[cgm$signatures[,2] == 1,2])
cgm$signatures[,2]
cgm$signatures[,]
cgm$signatures[1,]
cgm$signatures[which(cgm$signatures) == 1,]
cgm$signatures[which(cgm$signatures == 1),]
cgm$signatures[which(cgm$signatures$blue == 1),]
cgm$signatures$blue
cgm$signatures$blue == "1"
cgm$signatures$blue == 1
cgm$signatures[cgm$signatures$blue == 1]
cgm$signatures[cgm$signatures$blue == 1,]
cgm$signatures[,cgm$signatures$blue == 1]
cgm$signatures[,cgm$signatures$blue]
cgm$signatures[cgm$signatures$blue,]
cgm$signatures
cgm$signatures[2]
cgm$signatures$blue
cgm$signatures[2]
cgm$signatures[2] == 1
names(which(cgm$signatures[2] == 1))
which(cgm$signatures[2] == 1)
cgm$signatures[2][which(cgm$signatures[2] == 1),]
cgm$signatures[which(cgm$signatures[2] == 1),]
ro2names(cgm$signatures[which(cgm$signatures[2] == 1),])
rownames(cgm$signatures[which(cgm$signatures[2] == 1),])
rownames(cgm$signatures[which(cgm$signatures[3] == 1),])
write.table(rownames(cgm$signatures[which(cgm$signatures[2] == 1),]),"blue.txt", sep = '\t', quote = F)
write.table(rownames(cgm$signatures[which(cgm$signatures[3] == 1),]),"brown.txt", sep = '\t', quote = F)
rm(list=ls())
load("~/Desktop/overlappingCGM/mouse metabolic syndrome/processed_data.RData")
dim(exp)
View(cgm$signatures)
setwd("~/Desktop/overlappingCGM/mouse metabolic syndrome")
rownames(cgm$signatures[which(cgm$signatures[2] == 1),])
write.table(rownames(cgm$signatures[which(cgm$signatures[1] == 1),]),"turquoise.txt", sep = '\t', quote = F)
rownames(cgm$signatures[which(cgm$signatures[2] == 1),])
write.table(rownames(cgm$signatures[which(cgm$signatures[2] == 1),]),"blue.txt", sep = '\t', quote = F)
write.table(rownames(cgm$signatures[which(cgm$signatures[4] == 1),]),"yellow_mouse.txt", sep = '\t', quote = F)
write.table(rownames(cgm$signatures[which(cgm$signatures[5] == 1),]),"green_mouse.txt", sep = '\t', quote = F)
write.table(rownames(cgm$signatures[which(cgm$signatures[6] == 1),]),"red_mouse.txt", sep = '\t', quote = F)
write.table(rownames(cgm$signatures[which(cgm$signatures[7] == 1),]),"black_mouse.txt", sep = '\t', quote = F)
write.table(rownames(cgm$signatures[which(cgm$signatures[8] == 1),]),"pink_mouse.txt", sep = '\t', quote = F)
write.table(rownames(cgm$signatures[which(cgm$signatures[9] == 1),]),"magenta_mouse.txt", sep = '\t', quote = F)
write.table(rownames(cgm$signatures[which(cgm$signatures[10] == 1),]),"purple_mouse.txt", sep = '\t', quote = F)
write.table(rownames(cgm$signatures[which(cgm$signatures[11] == 1),]),"greenyellow_mouse.txt", sep = '\t', quote = F)
write.table(rownames(cgm$signatures[which(cgm$signatures[12] == 1),]),"tan_mouse.txt", sep = '\t', quote = F)
write.table(rownames(cgm$signatures[which(cgm$signatures[13] == 1),]),"salmon_mouse.txt", sep = '\t', quote = F)
write.table(rownames(cgm$signatures[which(cgm$signatures[15] == 1),]),"midnightblue_mouse.txt", sep = '\t', quote = F)
write.table(rownames(cgm$signatures[which(cgm$signatures[16] == 1),]),"lightcyan_mouse.txt", sep = '\t', quote = F)
write.table(rownames(cgm$signatures[which(cgm$signatures[17] == 1),]),"gray60_mouse.txt", sep = '\t', quote = F)
write.table(rownames(cgm$signatures[which(cgm$signatures[18] == 1),]),"lightgreen_mouse.txt", sep = '\t', quote = F)
rm(list=ls())
load("~/Desktop/overlappingCGM/human breast cancer/preprocessed_data.RData")
dim(exp)
set.seed(1902)
runLogCLR <- coseq(t(exp), K=2:15, transformation="none",norm="TMM",
meanFilterCutoff=50, model="logclr",
nstart=1, iter.max=10, parallel = T)
dim(exp)
corrplot
install.packages('corrplot')
install.packages("corrplot")
library(corrplot)
.rs.restartR()
corrplot(M, method = "circle")
library(corrplot)
corrplot(cor(MEs, cgm$patterns), method = "circle")
par(mfrow=c(1,2))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
par(mfrow=c(2,1))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
resize(x, w = 200, h = 100)
sizeGrWindow(9, 5)
par(mfrow=c(2,1))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
sizeGrWindow(5, 3)
par(mfrow=c(2,1))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
sizeGrWindow(2, 3)
par(mfrow=c(2,1))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
sizeGrWindow(2, 2)
par(mfrow=c(2,1))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
dev.off()
resize.win <- function(Width=6, Height=6)
{
# works for windows
dev.off(); # dev.new(width=6, height=6)
windows(record=TRUE, width=Width, height=Height)
}
par(mfrow=c(2,1))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
resize.win(3,5)
resize.win(3,5)
par(mfrow=c(2,1))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
resize.win(2,5)
par(mfrow=c(2,1))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
resize.win(1,5)
par(mfrow=c(2,1))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
resize.win(3,5)
par(mfrow=c(1,2))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
resize.win(5,3)
par(mfrow=c(1,2))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
dev.off()
resize.win(5,3)
par(mfrow=c(1,2))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
dev.new <- function(width = 7, height = 7)
{ platform <- sessionInfo()$platform if (grepl("linux",platform))
{ x11(width=width, height=height) }
else if (grepl("pc",platform))
{ windows(width=width, height=height) }
else if (grepl("apple", platform))
{ quartz(width=width, height=height) } }
dev.new <- function(width = 7, height = 7){
platform <- sessionInfo()$platform if (grepl("linux",platform))
{ x11(width=width, height=height) }
else if (grepl("pc",platform)) { windows(width=width, height=height) }
else if (grepl("apple", platform)){ quartz(width=width, height=height) } }
dev.off()
dev.new <- function(width = 7, height = 7){
platform <- sessionInfo()$platform if (grepl("linux",platform)) { x11(width=width, height=height)
} else if(grepl("pc",platform)) { windows(width=width, height=height) }
else if(grepl("apple", platform)){ quartz(width=width, height=height) } }
dev.new <- function(width = 7, height = 7){
platform <- sessionInfo()$platform if (grepl("linux",platform)) { x11(width=width, height=height)
} else if(grepl("pc",platform)) { windows(width=width, height=height)
} else if(grepl("apple", platform)){ quartz(width=width, height=height) } }
dev.new(width=10, height=5, unit="in")
par(mfrow=c(1,2))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
dev.new(width=5, height=6, unit="in")
par(mfrow=c(1,2))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
dev.new(width=5, height=6, unit="in")
par(mfrow=c(1,2))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
dev.new(width=2, height=6, unit="cm")
par(mfrow=c(1,2))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
dev.new(width=2, height=10, unit="cm")
par(mfrow=c(1,2))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
dev.new(width=2, height=20, unit="cm")
par(mfrow=c(1,2))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
dev.new(width=2, height=3, unit="cm")
par(mfrow=c(1,2))
corrplot(cor(wgcna$MEs, cgm$patterns), method = "circle")
corrplot(cor(MEs, cgm$patterns), method = "circle")
dim(exp)
set.seed(1902)
runLogCLR <- coseq(exp, K=2:15, transformation="none",norm="TMM",
meanFilterCutoff=50, model="logclr",
nstart=1, iter.max=10, parallel = T)
set.seed(1902)
runLogCLR <- coseq(exp, K=2:15)
View(exp)
dim(exp)
set.seed(1902)
runLogCLR <- coseq(t(exp), K=2:15)
rm(list=ls())
load("~/Desktop/overlappingCGM/mouse metabolic syndrome/processed_data.RData")
dim(exp)
set.seed(1902)
runLogCLR <- coseq(t(exp), K=2:15)
library(coseq)
set.seed(1902)
runLogCLR <- coseq(t(exp), K=2:30)
runLogCLR <- coseq(t(exp), K=2:25, transformation="logclr",norm="TMM",
meanFilterCutoff=50, model="kmeans",
nstart=1, iter.max=10, parallel= TRUE)
exp1 = t(exp) %>% data.frame()
cem <- cemitool(exp1, cor_method = "pearson",min_ngen = 30)
?cemitool
View(cem)
cem@fit_indices[["Power"]]
cem <- cemitool(exp, cor_method = "pearson")
cem <- cemitool(exp1, cor_method = "pearson")
runLogCLR <- coseq(t(exp), K=2:25, transformation="logclr",norm="TMM",
meanFilterCutoff=50, model="kmeans",
nstart=1, iter.max=10, parallel= TRUE)
set.seed(1902)
runLogCLR <- coseq(exp1, K=2:25, transformation="none",norm="TMM",
meanFilterCutoff=50, model="kmeans",
nstart=1, iter.max=10, parallel= TRUE)
summary(runLogCLR)
set.seed(1902)
runLogCLR <- coseq(exp1, K=2:25, transformation="clr",norm="TMM",
meanFilterCutoff=50, model="kmeans",
nstart=1, iter.max=10, parallel= TRUE)
summary(runLogCLR)
labels <- clusters(runLogCLR)
table(labels)
set.seed(1902)
runLogCLR <- coseq(exp1, K=2:25, transformation="clr",norm="TMM",
meanFilterCutoff=50, model="kmeans",
nstart=1, iter.max=10, parallel= TRUE)
summary(runLogCLR)
labels <- clusters(runLogCLR)
table(labels)
View(labels)
View(runLogCLR)
runLogCLR@metadata[["nbClusterError"]]
dim(exp)
View(Label())
View(labels)
labels1 =data.frame(labels)
labels1[labels1 == 1]
labels1[labels1$labels == 1]
View(labels1)
labels1[labels1$labels == "1"]
labels1[labels1 == "1"]
labels1[which(labels1$labels == 1),]
labels1[which(labels1 == 1),]
labels1[which(labels1[1] == 1),]
labels1[which(labels1[,1] == 1),]
labels1[,1]
which(labels1[,1] == 1)
rownanes(labels1[which(labels1[,1] == 1),])
rownames(labels1[which(labels1[,1] == 1),])
labels1[which(labels1[,1] == 1),]
which(labels1[,1] == 1)
rownames(labels1)[1]
rownames(labels1)[labels1[which(labels1[,1] == 1),]]
rownames(labels1)[labels1[which(labels1$labels == 1),]]
rownames(labels1[labels1[which(labels1$labels == 1),]])
getwd()
gene = rownames(labels1[labels1[which(labels1$labels == 1),]])
write.table(gene,"clust1.txt", quote = F, row.names = F)
gene = rownames(labels1[labels1[which(labels1$labels == 2),]])
write.table(gene,"clust2.txt", quote = F, row.names = F)
labels1[labels1[which(labels1$labels == 2),]]
labels1[labels1[which(labels1$labels == "2"),]]
labels1[labels1[which(labels1$labels),]]
View(labels1``)
View(labels1)
labels1[labels1[which(labels1$labels == "1"),]]
labels1[labels1[which(labels1$labels == 1),]]
labels1[which(labels1$labels == 1),]]
labels1[which(labels1$labels == 1),]
which(labels1$labels == 1)
rownames(label1)[which(labels1$labels == 1)]
rownames(labels1)[which(labels1$labels == 1)]
getwd)
getwd()
gene = rownames(labels1)[which(labels1$labels == 1)]
write.table(gene,"clust1.txt", quote = F, row.names = F)
gene = rownames(labels1)[which(labels1$labels == 1)]
write.table(gene,"clust1.txt", quote = F, row.names = F,col.names = F)
gene = rownames(labels1)[which(labels1$labels == 2)]
write.table(gene,"clust2.txt", quote = F, row.names = F,col.names = F)
gene = rownames(labels1)[which(labels1$labels == 3)]
write.table(gene,"clust3.txt", quote = F, row.names = F,col.names = F)
gene = rownames(labels1)[which(labels1$labels == 5)]
write.table(gene,"clust5.txt", quote = F, row.names = F,col.names = F)
gene = rownames(labels1)[which(labels1$labels == 4)]
write.table(gene,"clust4.txt", quote = F, row.names = F,col.names = F)
